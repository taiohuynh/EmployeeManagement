@page "/identity/account/register"
@using Client.Pages.OtherPage
@layout AuthenticationLayout
@using Syncfusion.Blazor.Popups
@inject SfDialogService DialogService
<div class="container">
	<div class="row">
		<div class="col-lg-4"></div>
		<div class="col-lg-4">
			<EditForm Enhance Model="User" OnValidSubmit="HandleRegistration">
				<DataAnnotationsValidator />
				<div class="card bg-dark d-flex justify-content-center" style="opacity:0.8; margin-top:50%; border-radius:10px; color: white; font-weight:bold">
					<div class="card-header text-center fs-5 mb-2">Register</div>
					<div class="card-body">
						<div class="form-group">
							<label class="form-label">Fullname</label>
							<InputText @bind-Value="User.Fullname" class="form-control"></InputText>
						</div>
						<div class="form-group mt-3">
							<label class="form-label">Email</label>
							<InputText @bind-Value="User.Email" class="form-control"></InputText>
						</div>
						<div class="form-group mt-3">
							<label class="form-label">Password</label>
							<input type="password" @bind="User.Password" class="form-control"></input>
						</div>
						<div class="form-group mt-3">
							<label class="form-label">Confirm Password</label>
							<input type="password" @bind="User.ConfirmPassword" class="form-control"></input>
						</div>
						<div class="form-group mt-3">
							@if (ShowLoadingButton)
							{
								<ButtonLoadingSpinner></ButtonLoadingSpinner>
							}
							else
							{
								<button class="btn btn-primary float-end" type="submit">Register</button>
							}
						</div>
					</div>
					<div class="card-footer">
						<span class="text-center">
							Have account already? |
							<a class="btn-link" href="identity/account/login">Sign In</a>
						</span>
						<ValidationSummary />
					</div>
				</div>
			</EditForm>
		</div>
		<div class="col-lg-4"></div>
	</div>
</div>

@code {
	public bool ShowLoadingButton { get; set; } = false;
	Register User = new();

	[CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
	protected async override Task OnInitializedAsync()
	{
		await CheckUserAuthentication();
	}

	async Task HandleRegistration()
	{
		ShowLoadingButton = true;
		var result = await accountService.CreateAsync(User);
		if (result.Flag)
		{
			await DisplayDialog(result.Message, "Register success");
			User = new();
		}
		else
		{
			await DisplayDialog(result.Message, "Alert");
		}
		ShowLoadingButton = false;
	}

	private async Task DisplayDialog(string content, string title)
	{
		await DialogService.AlertAsync(content, title);
	}

	private async Task CheckUserAuthentication()
	{
		var user = (await AuthenticationState).User;
		bool isUserAuthenticated = user.Identity!.IsAuthenticated;
		if (isUserAuthenticated)
			NavManager.NavigateTo("/home/dashboard");
	}
}